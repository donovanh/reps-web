{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Reps - Bodyweight Exercises",
	"language": "en",
	"home_page_url": "https://reps.hop.ie/",
	"feed_url": "https://reps.hop.ie/feed/feed.json",
	"description": "Info about my Reps app.",
	"author": {
		"name": "Donovan Hutchinson",
		"url": "https://reps.hop.ie"
	},
	"items": [
		{
			"id": "https://reps.hop.ie/dev-diary-03/",
			"url": "https://reps.hop.ie/dev-diary-03/",
			"title": "Reps Dev Diary #3: iCloud and screen sizes",
			"content_html": "<p>Last week I launched my <a href=\"https://testflight.apple.com/join/Keq4Mca2\">Reps app on TestFlight</a> for any curious early testers to try out. This week I looked into how I can persist recorded data, and adjusted layouts for smaller screens.</p>\n<h2 id=\"todo-check-in\" tabindex=\"-1\">TODO Check-in <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-03/\">#</a></h2>\n<p>Last week I set out a bunch of tasks of various sizes that I hoped to tackle this week. I managed to clear up most of them, including:</p>\n<ul>\n<li>Adjusting the exercise layout to move &quot;Sets 1 of 2&quot; to a better position</li>\n<li>Added the &quot;Saving...&quot; flow to the timer view</li>\n<li>Persisting the measured seconds amount in timer when switching to &quot;Manual&quot;</li>\n<li>Making animations invisible when scrolling between exercises (hoping to make that transition smoother)</li>\n</ul>\n<p>For the latter, I used a state variable <code>isScrolling</code> to determine when the <code>scrollTo</code> action is called, and when true set the animation's opacity to <code>0</code>. I added a bit of animation too, like so:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token punctuation\">.</span><span class=\"token function\">opacity</span><span class=\"token punctuation\">(</span>isScrolling <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">animation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>easeOut<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> isScrolling<span class=\"token punctuation\">)</span></code></pre>\n<p>The tricky part though was setting <code>isScrolling</code> to true. This had to happen within a child view, so I passed the Bool in as a <code>Binding</code>, so I can change it in the child view's saving action. This seems to work well.</p>\n<p>So after these optimisations, I also took on some new items this week. Saving to iCloud, and optimising for smaller screens.</p>\n<h2 id=\"icloud\" tabindex=\"-1\">iCloud <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-03/\">#</a></h2>\n<p>There are two types of data stored in my app. One is <code>UserDefaults</code>, which includes things like the current weekly training routine and the user's progression level in each exercise. The other is the <code>Journal</code> data, which is stored in <code>SwiftData</code>.</p>\n<p>I've not managed to work out an easy way to backup and sync the <code>UserDefaults</code> yet, though I believe there are ways to do so (I could for example check if the <code>UserDefault</code> values are not set, then check for an iCloud version of same to hydrate them on first use - maybe next week).</p>\n<p>So I decided to make use of <a href=\"https://www.hackingwithswift.com/quick-start/swiftdata/how-to-sync-swiftdata-with-icloud\">this handy guide on saving SwiftData to iCloud</a>. Turns out it was very easy, once I'd activated <code>iCloud</code> in the <code>Signing &amp; Capabilities settings</code> section. One change I did have to make was to give my model default values in the <code>init</code> method. Once I had done that, I could see the syncing happening in the console when testing locally and on-device.</p>\n<p>So now, if I reinstall the app, it should pull down the important training history.</p>\n<h2 id=\"screen-size-adjustments\" tabindex=\"-1\">Screen size adjustments <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-03/\">#</a></h2>\n<p>I found that my record exercise screens were overflowing the height of smaller screen phones such as the <code>iPhone SE</code> and <code>12 Mini</code>. To work around this, I decided to adjust the size of various elements based on the given screen height.</p>\n<p>To get this, I found an extension for <code>UIScreen</code> (in <a href=\"https://stackoverflow.com/a/58321449\">this StackOverflow answer</a>):</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token class-name\">UIScreen</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/// Retrieve the (small) width from portrait mode</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> portraitWidth <span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UIScreen</span><span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span>bounds<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UIScreen</span><span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span>bounds<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// Retrieve the (big) height from portrait mode</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> portraitHeight <span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UIScreen</span><span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span>bounds<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UIScreen</span><span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span>bounds<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// Retrieve the (big) width from landscape mode</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> landscapeWidth <span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UIScreen</span><span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span>bounds<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UIScreen</span><span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span>bounds<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// Retrieve the (small) height from landscape mode</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> landscapeHeight <span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UIScreen</span><span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span>bounds<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UIScreen</span><span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span>bounds<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Using this I checked for screens under 700 points in height, and set the animation size to a smaller value. I think I'll need to do more testing when I revisit the design, as it's very rough currently, but at least it works. Small steps!</p>\n<h2 id=\"current-todo-list\" tabindex=\"-1\">Current TODO list <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-03/\">#</a></h2>\n<p>Based on what I learned this week, I'd like to work on the following this week:</p>\n<ul>\n<li>Adding iCloud backup for UserDefaults</li>\n<li>Setting up mock Journal data so I can start working on the journal view</li>\n<li>Planning a &quot;Progression indicator&quot; value which could help inform people when it's time to progress to the next level</li>\n</ul>\n<p>The last one is going to be a core feature of this app, and one I'd hope to refine over time. I've got to start somewhere though so I think I'll aim for something super-simple and work from there.</p>\n<p>Thanks for reading, and if you want to see my app as it is built, feel free to <a href=\"https://testflight.apple.com/join/Keq4Mca2\">download Reps on TestFlight</a>.</p>\n",
			"date_published": "2024-02-24T00:00:00Z"
		}
		,
		{
			"id": "https://reps.hop.ie/dev-diary-02/",
			"url": "https://reps.hop.ie/dev-diary-02/",
			"title": "Reps Dev Diary #2: TestFlight &amp; Timers",
			"content_html": "<p>Last week I launched my <a href=\"https://testflight.apple.com/join/Keq4Mca2\">Reps app on TestFlight</a> for any curious early testers to try out. I also started using it properly myself and as a result, I've a long list of things I really want to improve right away.</p>\n<h2 id=\"testflight-no-testing-like-user-testing\" tabindex=\"-1\">TestFlight: No testing like user testing <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-02/\">#</a></h2>\n<p>No matter how much time spent going through user flows in the simulator, it's an entirely different experience using an app for real on a device. In my case, when I started using my app in the morning to log a workout, I immediately spotted a bunch of small (and large) issues.</p>\n<p>I also wanted to bring in some external testers to try to get some feedback. To do this I enrolled in <a href=\"https://appstoreconnect.apple.com\">App Store Connect</a>, which included a €99-per-year fee, and <a href=\"https://developer.apple.com/documentation/xcode/distributing-your-app-for-beta-testing-and-releases\">pushed an archive of my app to TestFlight</a>.</p>\n<p>The process of creating a release and then submitting it for review was fairly straightforward. One thing I needed to do was create a <a href=\"https://reps.hop.ie\">Reps app website</a> with a <a href=\"https://reps.hop.ie/privacy/\">privacy policy</a>. To do this I set up a quick <a href=\"https://www.11ty.dev\">11ty</a> project and deployed it to Github Pages.</p>\n<p>I then set up a public group in App Store Connect and when my TestFlight was reviewed I could start sharing the link.</p>\n<h2 id=\"deploy-schedule\" tabindex=\"-1\">Deploy schedule <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-02/\">#</a></h2>\n<p>It's very easy to deploy new versions of apps to TestFlight. I'm glad it is because I at one point managed to push a version with an important feature commented out. I was able to expire the old version and upload a new within minutes.</p>\n<p>Generally though I'm going to aim to release a new version once every week or so, barring emergency fixes.</p>\n<h2 id=\"initial-feedback\" tabindex=\"-1\">Initial feedback <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-02/\">#</a></h2>\n<p>So far I've quickly amassed a list of things I want to improve. In the first week the main issues were:</p>\n<ul>\n<li>Some late-updating quirks in the UI</li>\n<li>The &quot;Log x reps&quot; button jumps too suddenly to the next exercise, which feels jarring</li>\n<li>It's a hassle to have to leave the app to start a timer for timed exercises</li>\n</ul>\n<p>Last weekend I set out to address these issues.</p>\n<h3 id=\"ui-state-out-of-sync\" tabindex=\"-1\">UI state out of sync <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-02/\">#</a></h3>\n<p>Firstly, I refactored the way I store the UI state into one central ViewModel class for the main view. I had been tracking the state with two separate classes and trying to update them as needed, but without a central source of truth the UI was partially-updating at times. This pushes those two models into a role of background-storage and initial-state, and then my main ViewModel is responsible for keeping the current state and pushing updates into those models for storage. Seems to make things more solid.</p>\n<p>I still end up instatiating the main ViewModel and then passing it down to children views, which feels a little sub-optimal but it's working for now until I find a way to properly use the local Environment to store the class.</p>\n<h3 id=\"logging-reps-button\" tabindex=\"-1\">Logging reps button <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-02/\">#</a></h3>\n<p>To help with this issue, I wanted to make it clear when reps were being saved. I also thought it would be helpful to have a <code>Cancel</code> option, as I've been hearing a lot about phantom clicks from Vision Pro users, and this can easily happen on any touch devices.</p>\n<p>To address this, I added a <code>Task</code> to the saving action that sets <code>isSavingReps</code> to true, while awaiting a timer for a couple of seconds. During this time it'll show a saving message (maybe an icon later) along with a <code>Cancel</code> button. Hitting cancel stops the Task before it progresses to the save action.</p>\n<div class=\"video-wrapper\">\n    <video autoplay=\"\" muted=\"\" loop=\"\" playsinline=\"\" width=\"300\">\n    <source src=\"https://i.imgur.com/oP7BiI2.mp4\" type=\"video/mp4\">\n    </video>\n\n<p>I think this improves the feel of adding reps.</p>\n<h3 id=\"timed-exercises\" tabindex=\"-1\">Timed exercises <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-02/\">#</a></h3>\n<p>This was a big one. I found it was less than ideal to have to leave the app to start a timer when recording timed exercises. To fix this, I built a timer function into the exercise record view.</p>\n<div style=\"max-width: 300px\"><picture><source type=\"image/avif\" srcset=\"https://reps.hop.ie/img/I2G_fYqqjw-692.avif 692w\"><source type=\"image/webp\" srcset=\"https://reps.hop.ie/img/I2G_fYqqjw-692.webp 692w\"><img alt=\"Timer view\" loading=\"lazy\" decoding=\"async\" src=\"https://reps.hop.ie/img/I2G_fYqqjw-692.png\" width=\"692\" height=\"622\"></picture></div>\n<p>This one was complex enough to require it's own ViewModel. I wanted to manage a few things - the accrued time both as a countdown until the target time was reached, and then counting upward, as well as a count-in of 5 seconds before the timer starts timing.</p>\n<p>To do this I have two timers, with a reset option that you can call either by pressing reset or tapping the count-in while it's underway.</p>\n<div class=\"video-wrapper\">\n    <video autoplay=\"\" muted=\"\" loop=\"\" playsinline=\"\" width=\"300\">\n    <source src=\"https://i.imgur.com/I3nM0di.mp4\" type=\"video/mp4\">\n    </video>\n\n<p>Once you stop the timer, it gives the option to then log the number of seconds recorded. You can also jump across to the manual view and record the number of seconds there if you prefer.</p>\n<p>Lastly I added some sounds to indicate when the count-in was happening, when the timer starts, and when the target time is achieved. Of all the interactions, I think this is one that benefits from having some sounds as you might not be looking at the timer when doing a handstand, for example.</p>\n<p>I grabbed some free sounds from <a href=\"https://kenney.nl\">Kenney.nl</a> and they seem ok for now.</p>\n<p>It's good enough as a first version, but I see a few gaps I really need to tidy up to make it feel more complete.</p>\n<h2 id=\"current-todo-list\" tabindex=\"-1\">Current TODO list <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-02/\">#</a></h2>\n<p>I've since picked up a bunch more items for the TODO list. Some highlights that I hope to work on this week:</p>\n<ul>\n<li>UI fixes: Place the &quot;Set 1 of 2&quot; text closer to the reps number</li>\n<li>Add the <code>Saving...</code> flow for measured seconds</li>\n<li>Add plus and minus beside the log button to adjust the measured seconds</li>\n<li>Improve the animation between exercises (it's a bit choppy)</li>\n<li>... and a bunch of small UI tweaks</li>\n</ul>\n<p>Thanks for reading, and if you want to see my app as it is built, feel free to <a href=\"https://testflight.apple.com/join/Keq4Mca2\">download Reps on TestFlight</a>.</p>\n</div></div>",
			"date_published": "2024-02-19T00:00:00Z"
		}
		,
		{
			"id": "https://reps.hop.ie/dev-diary-01/",
			"url": "https://reps.hop.ie/dev-diary-01/",
			"title": "Reps Dev Diary #1",
			"content_html": "<p>The following is a log of the process of designing and building an app, while learning Swift and SwiftUI.</p>\n<p>The following represents the result of my poking around in XCode for about 6 months. I'd like to do smaller, more regular updates. By reading this, you're helping me by providing me accountability. Thank you!</p>\n<h2 id=\"my-goals-for-this-app\" tabindex=\"-1\">My goals for this app <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h2>\n<p>I'm interested in building apps, not just for Vision Pro but also iOS. I enjoy creating things and was looking for a new challenge last year, so when the Vision Pro was announced I thought it was a good time to learn some <a href=\"https://developer.apple.com/xcode/swiftui/\">Swift UI</a>.</p>\n<p>For learning, I've been taking part in the amazing sessions over at <a href=\"http://hackingwithswift.com\">Hacking with Swift</a>. I'd very much recommend Paul's <a href=\"http://hackingwithswift.com/plus\">HWS+</a> program but also the <a href=\"https://www.hackingwithswift.com/100/swiftui\">100 Days of SwiftUI</a> is one of the best online learning resources I've ever experienced. And it's free!</p>\n<p>I learn best when building so I also decided to build myself an app as a side project.</p>\n<h2 id=\"app-idea\" tabindex=\"-1\">App idea <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h2>\n<p>My side project app idea is a bodyweight exercise tracking app, codenamed &quot;Reps&quot;. I've been interested in callisthenics for a long time and a fan of the <a href=\"https://www.dragondoor.com/b41/\">Convict Conditioning</a> training approach.</p>\n<p>I have been out of practice recently and would like to get back into training again and enjoy the structure Convict Conditioning affords. However I would like to have an app that helps with the logging, as I find keeping a log quite helpful as a motivation:</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://reps.hop.ie/img/920lBpLOur-1200.avif 1200w\"><source type=\"image/webp\" srcset=\"https://reps.hop.ie/img/920lBpLOur-1200.webp 1200w\"><img alt=\"A month's training, from back when I had more discipline.\" loading=\"lazy\" decoding=\"async\" src=\"https://reps.hop.ie/img/920lBpLOur-1200.jpeg\" width=\"1200\" height=\"900\"></picture></p>\n<p>So that's where I'm starting. An app to track, log and maybe do more interesting things with training data.</p>\n<h2 id=\"minimum-viable-product\" tabindex=\"-1\">Minimum viable product <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h2>\n<p>The minimum product I'll need to start is a way to set up an exercise routine, then record my reps for each exercise. Other features like analysing the saved data can wait.</p>\n<p>This means at minimum this app will need:</p>\n<ul>\n<li>A set of data defining the exercises and their progressions</li>\n<li>Illustrations for each progression that help me know what the exercise involves</li>\n<li>A way of setting up a weekly schedule</li>\n<li>A way of seeing what my workout is for today</li>\n<li>A way to record today's exercises</li>\n</ul>\n<h2 id=\"step-0-paper-sketching\" tabindex=\"-1\">Step 0: Paper sketching <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h2>\n<p><picture><source type=\"image/avif\" srcset=\"https://reps.hop.ie/img/xX0Z9HPo-7-1280.avif 1280w\"><source type=\"image/webp\" srcset=\"https://reps.hop.ie/img/xX0Z9HPo-7-1280.webp 1280w\"><img alt=\"Thinking through some flows on paper.\" loading=\"lazy\" decoding=\"async\" src=\"https://reps.hop.ie/img/xX0Z9HPo-7-1280.jpeg\" width=\"1280\" height=\"960\"></picture></p>\n<p>It's hard to just jump in and start coding, so I took a while to sketch out some (vague) notions for how the flows might work. While far from an actionable design, it got me thinking about the kinds of things I'd be showing and what data I would need.</p>\n<h2 id=\"step-1-data-and-data-structure\" tabindex=\"-1\">Step 1: Data and data structure <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h2>\n<p>To drive the views I need to set up some useful data. The purpose of this app is to guide the user along a series of exercise progressions.</p>\n<p>I decided to set up a structure similar to the Convict Conditioning guide. In it there are six exercise types: pushups, pullups, leg raises, squats, bridges and handstand pushups.</p>\n<p>Each exercise type has 10 progressions, ranging from easiest to hardest. Within each progression, there are 3 levels: beginner, intermediate, and progression level (which when completed allows you to progress to the next... progression). Naming is hard.</p>\n<p>To get it started in XCode, I set up the data like this:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> pushupDataSet<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Progression</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token class-name\">Progression</span><span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>pushup<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>wallPushups<span class=\"token punctuation\">,</span> reps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">.</span>beginner<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">.</span>intermediate<span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">.</span>progression<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">.</span>beginner<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">.</span>intermediate<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">.</span>progression<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> animationFileName<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"pushup-01\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Progression</span><span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\">//... and so on, 10 for each exercise type</span></code></pre>\n<p>In this we have the progression's stage (0 through 9), an exercise type, name, and then a dictionary for each of reps and sets.</p>\n<p>The <code>type</code> is an enum of exercise types, such as <code>.pushup</code>, <code>.pullup</code>, etc. This makes it easier to use <code>ExerciseType</code> values in my code.</p>\n<p>For the name, I use a <a href=\"https://developer.apple.com/documentation/foundation/localizedstringresource\">LocalizedStringResource</a> enum:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">ProgressionName</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">LocalizedStringResource</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> shortBridges <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Short bridges\"</span></span>\n    <span class=\"token keyword\">case</span> straightBridges <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Straight bridges\"</span></span>\n    <span class=\"token comment\">// etc</span></code></pre>\n<p>This will make it easier to translate than having hard-coded names in the data object.</p>\n<p>Lastly I later added in <code>animationFileName</code> - this is a string referencing the file name of the animation file I'll use to illustrate each progression.</p>\n<p>So, 6 sets of exercise progressions, each of which has their own definitions of their sets and reps.</p>\n<p>With this data set up, I needed to learn how to make some 3D assets to illustrate them.</p>\n<h2 id=\"step-2-illustrations-3d-animations\" tabindex=\"-1\">Step 2: Illustrations (3D animations) <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h2>\n<p>I'd like to keep my options open for porting this app to Vision Pro, and a big part of that means having 3D assets.</p>\n<p>I have a small amount of 3D experience from back in college days but I was basically starting from scratch.</p>\n<h3 id=\"blender\" tabindex=\"-1\">Blender <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h3>\n<p>To save some time, I downloaded <a href=\"http://www.blendswap.com/blends/view/74733\">this free mannequin model</a>. I'll need to find a way to add credit in the app, but hopefully this is a start.</p>\n<p>I wasn't able to make use of the model with the existing rig, so ended up setting up a new rig myself for positioning. I then created an animation for each of the 60 progressions.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://reps.hop.ie/img/HCPlLcVefR-2554.avif 2554w\"><source type=\"image/webp\" srcset=\"https://reps.hop.ie/img/HCPlLcVefR-2554.webp 2554w\"><img alt=\"Creating a pushup animation in Blender.\" loading=\"lazy\" decoding=\"async\" src=\"https://reps.hop.ie/img/HCPlLcVefR-2554.png\" width=\"2554\" height=\"1560\"></picture></p>\n<p>This took a while, close to 3 months. However I really like the result. Once I made the animations, the next challenge was bringing them into XCode.</p>\n<h3 id=\"file-size-issues\" tabindex=\"-1\">File size issues <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h3>\n<p>Embedding each animation file was over 5Mb in size. For 60 animations, that would mean at least 300Mb of files just for the animations. To work around this, I ended up saving one <code>base model</code> file, exported as a Collada (dae) file, and then setting up each of the others as just the animated rig without the model's mesh.</p>\n<p>With this I could then load one 3D model, and for each animation load the animation file and apply the animation to the <code>base model</code>. This resulted in animation files around 1.5Mb each. I'm sure I could optimise more but bringing the assets under 100Mb seems like a good start.</p>\n<h3 id=\"loading-3d-files-in-xcode\" tabindex=\"-1\">Loading 3D files in Xcode <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h3>\n<p>After a lot of Google-searching, I settled on using a <a href=\"https://developer.apple.com/documentation/scenekit/sceneview\">SceneView</a> to load the base Collada file, as well as the animation file, then apply this animation to the scene. Lastly I also grab the camera from the animation file and apply that to the scene.</p>\n<div class=\"video-wrapper\">\n    <video autoplay=\"\" muted=\"\" loop=\"\" playsinline=\"\" width=\"200\">\n    <source src=\"https://i.imgur.com/F0MSAMJ.mp4\" type=\"video/mp4\">\n    </video>\n\n<p>This method creates the scene and applies the animation and camera:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">loadScene</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> currentProgressionAnimationName<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> isPaused<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">SCNScene</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> scene <span class=\"token operator\">=</span> <span class=\"token class-name\">SCNScene</span><span class=\"token punctuation\">(</span>named<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"base-model\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">let</span> baseSceneSource <span class=\"token operator\">=</span> <span class=\"token class-name\">SCNSceneSource</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bundle</span><span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>forResource<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"base-model\"</span></span><span class=\"token punctuation\">,</span> withExtension<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"dae\"</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">:</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Scene could not be loaded\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">SCNScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> animationSceneSourceUrl <span class=\"token operator\">=</span> <span class=\"token class-name\">Bundle</span><span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>forResource<span class=\"token punctuation\">:</span> currentProgressionAnimationName<span class=\"token punctuation\">,</span> withExtension<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"dae\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">let</span> animationSceneSource <span class=\"token operator\">=</span> <span class=\"token class-name\">SCNSceneSource</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> animationSceneSourceUrl<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">:</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Animation file \\\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">currentProgressionAnimationName</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\\\" could not be loaded\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">SCNScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> animationIdentifier <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"action_container-rig\"</span></span>\n    <span class=\"token keyword\">let</span> cameraIdentifier <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Camera\"</span></span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> animationObj <span class=\"token operator\">=</span> animationSceneSource<span class=\"token punctuation\">.</span><span class=\"token function\">entryWithIdentifier</span><span class=\"token punctuation\">(</span>animationIdentifier<span class=\"token punctuation\">,</span>\n                                                     withClass<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CAAnimation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        animationObj<span class=\"token punctuation\">.</span>repeatCount <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>infinity\n        scene<span class=\"token punctuation\">.</span>rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">addAnimation</span><span class=\"token punctuation\">(</span>animationObj<span class=\"token punctuation\">,</span> forKey<span class=\"token punctuation\">:</span> animationIdentifier<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Override camera position</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> animationSceneCameraNode <span class=\"token operator\">=</span> animationSceneSource<span class=\"token punctuation\">.</span><span class=\"token function\">entryWithIdentifier</span><span class=\"token punctuation\">(</span>cameraIdentifier<span class=\"token punctuation\">,</span> withClass<span class=\"token punctuation\">:</span> <span class=\"token class-name\">SCNNode</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n       <span class=\"token keyword\">let</span> existingCameraNode <span class=\"token operator\">=</span> scene<span class=\"token punctuation\">.</span>rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">childNode</span><span class=\"token punctuation\">(</span>withName<span class=\"token punctuation\">:</span> cameraIdentifier<span class=\"token punctuation\">,</span> recursively<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        existingCameraNode<span class=\"token punctuation\">.</span><span class=\"token function\">removeFromParentNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        scene<span class=\"token punctuation\">.</span>rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">addChildNode</span><span class=\"token punctuation\">(</span>animationSceneCameraNode<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    scene<span class=\"token punctuation\">.</span>isPaused <span class=\"token operator\">=</span> isPaused\n    scene<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>contents <span class=\"token operator\">=</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>clear\n\n    <span class=\"token keyword\">return</span> scene\n<span class=\"token punctuation\">}</span></code></pre>\n<p>In a view, I can use this method it like this:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token class-name\">SceneView</span><span class=\"token punctuation\">(</span>\n  scene<span class=\"token punctuation\">:</span> <span class=\"token function\">loadScene</span><span class=\"token punctuation\">(</span>animtionName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>temporalAntialiasingEnabled<span class=\"token punctuation\">]</span> <span class=\"token comment\">// Other options can be used for control, etc</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Notice I've an <code>isPaused</code> boolean. I can use this later to generate static images from the animations for use in badges and icons.</p>\n<p>I've also set the background to <code>Color.clear</code>. However, that won't work yet. I needed some more work to give the animation a clear background.</p>\n<h3 id=\"transparent-background\" tabindex=\"-1\">Transparent background <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h3>\n<p>Turns out a `SceneView`` doesn't support transparent backgrounds. The only way I could find to make the background transparent was to wrap the scene in a <a href=\"https://developer.apple.com/spritekit/\">SpriteKit</a> view:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">AnimationSpriteView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@State</span> <span class=\"token keyword\">var</span> animationName<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">var</span> isPaused<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bool</span>\n\n    <span class=\"token keyword\">var</span> createdScene<span class=\"token punctuation\">:</span> <span class=\"token class-name\">SKScene</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> scene <span class=\"token operator\">=</span> <span class=\"token class-name\">SKScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        scene<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token class-name\">UIColor</span><span class=\"token punctuation\">.</span>clear\n        <span class=\"token keyword\">let</span> model <span class=\"token operator\">=</span> <span class=\"token class-name\">SK3DNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        scene<span class=\"token punctuation\">.</span>anchorPoint <span class=\"token operator\">=</span> <span class=\"token class-name\">CGPoint</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n        model<span class=\"token punctuation\">.</span>scnScene <span class=\"token operator\">=</span> <span class=\"token function\">loadScene</span><span class=\"token punctuation\">(</span>animationName<span class=\"token punctuation\">,</span> isPaused<span class=\"token punctuation\">:</span> isPaused<span class=\"token punctuation\">)</span>\n        scene<span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> scene\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SpriteView</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">:</span> createdScene<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>allowsTransparency<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This creates a <a href=\"https://developer.apple.com/documentation/spritekit/sk3dnode\">SK3DNode</a> as a model into which I load the scene above. I had to hack at the <code>anchorPoint</code> a bit, to get the model to sit correctly in the scene but these values seemed to work.</p>\n<div class=\"video-wrapper\">\n    <video autoplay=\"\" muted=\"\" loop=\"\" playsinline=\"\" width=\"200\">\n    <source src=\"https://i.imgur.com/tMEmWl3.mp4\" type=\"video/mp4\">\n    </video>\n\n<h3 id=\"generating-icons\" tabindex=\"-1\">Generating icons <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h3>\n<p>With animations, I can now create posed versions to use as icons. I'm jumping around a bit here, I did the icons much more recently but it fits better here.</p>\n<p>Since the animations have a transparent background, I can add some shapes behind and apply effects to make some icons:</p>\n<div style=\"max-width: 220px\">\n<picture><source type=\"image/avif\" srcset=\"https://reps.hop.ie/img/YAPLCmLIYW-636.avif 636w\"><source type=\"image/webp\" srcset=\"https://reps.hop.ie/img/YAPLCmLIYW-636.webp 636w\"><img alt=\"Some ways I can use the animation object to create static icons.\" loading=\"lazy\" decoding=\"async\" src=\"https://reps.hop.ie/img/YAPLCmLIYW-636.png\" width=\"636\" height=\"1304\"></picture>\n</div>\n<p>These icons make use of the animation view like so:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token class-name\">ZStack</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>complete <span class=\"token operator\">?</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>themeColor<span class=\"token punctuation\">.</span><span class=\"token function\">opacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>gray<span class=\"token punctuation\">.</span><span class=\"token function\">opacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> size <span class=\"token operator\">*</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">.</span><span class=\"token function\">opacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> size <span class=\"token operator\">*</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">AnimationView</span><span class=\"token punctuation\">(</span>progressionAnimationName<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> size<span class=\"token punctuation\">,</span> isPaused<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">grayscale</span><span class=\"token punctuation\">(</span>complete <span class=\"token operator\">?</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">contrast</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">shadow</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">:</span> size <span class=\"token operator\">*</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span>calculatedOffsets<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> size<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> size<span class=\"token punctuation\">)</span></code></pre>\n<p>This applies two circles within a ZStack, and scales according to a given <code>size</code> double. For the name, I'm passing a <code>pose</code> version of each animation. Since it's paused, I created a version of each animation with just a few frames, which brought down the size of each pose animation file to about 300Kb.</p>\n<p>I've learned it's possible to apply some interesting visual effect modifiers! Here I'm using <code>greyscale</code> for showing a desaturated version when the exercise is incomplete, I'm upping the <code>contrast</code> a bit, and even adding a white glowing effect with <code>shadow</code>.</p>\n<p>The <code>calculatedOffsets</code> value is from a dictionary of offsets I used to nudge each pose into the right position relative to the center of the icon. These are also expressed in points adjusted for the given <code>size</code> value, so it remains consistent at any size.</p>\n<p>I'm hoping to get one for each progression. It's a lot of files but they look great and can scale to any size.</p>\n<h2 id=\"step-3-views\" tabindex=\"-1\">Step 3: Views <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h2>\n<p>The structure of the app is simple enough - a home view containing today's exercises, a sheet that pops over to allow people to change each exercise's progression level, and another sheet where they can record the exercise.</p>\n<p>I wracked my brain for a while on how to make this as simple as possible, and I think a decent approach is to have the idea of an &quot;edit mode&quot; within the home view. When in edit mode, selecting an exercise opens the change-progression sheet. Otherwise, selecting an exercise should let the user record an exercise.</p>\n<p>It would be nice also if people can navigate through each day of the week (Mondays, Tuesdays, etc) and set the desired exercises to each day to manage the weekly routine.</p>\n<h3 id=\"home-view\" tabindex=\"-1\">Home view <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h3>\n<div style=\"max-width: 294.5px; padding-top: 20px\">\n<picture><source type=\"image/avif\" srcset=\"https://reps.hop.ie/img/VbgX4NXOpv-1179.avif 1179w\"><source type=\"image/webp\" srcset=\"https://reps.hop.ie/img/VbgX4NXOpv-1179.webp 1179w\"><img alt=\"The app's home view.\" loading=\"lazy\" decoding=\"async\" src=\"https://reps.hop.ie/img/VbgX4NXOpv-1179.png\" width=\"1179\" height=\"2556\"></picture>\n</div>\n<p>This is the main view of the app. It lists the exercises for the day. From here the main flow is to do a workout. Selecting an exercise or pressing the <code>Start workout</code> button opens the &quot;record exercise&quot; view in a sheet.</p>\n<h3 id=\"displaying-exercises\" tabindex=\"-1\">Displaying exercises <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h3>\n<p>To show the right progressions, I make use of two objects persisted to <a href=\"https://developer.apple.com/documentation/foundation/userdefaults#\">UserDefaults</a>. One being a dictionary of exercises by day as <code>[Int: [ExerciseType]]</code>. Each day of the week represented by an <code>Int</code> then stores an array of exercise types.</p>\n<p>This allows me to list the right types of exercise for each day. To display the correct exercise progression, I have a store a dictionary of <code>UserExerciseStages</code>. For each <code>ExerciseType</code> I store the level and stage. I can then use that to ensure the correct progression is shown.</p>\n<p>I store these both in <code>UserDefaults</code> as the amount of data needed is small enough not to need a larger store.</p>\n<div style=\"max-width: 294.5px; padding-top: 20px\">\n<picture><source type=\"image/avif\" srcset=\"https://reps.hop.ie/img/mQhWZsSjw0-1179.avif 1179w\"><source type=\"image/webp\" srcset=\"https://reps.hop.ie/img/mQhWZsSjw0-1179.webp 1179w\"><img alt=\"Recording exercises.\" loading=\"lazy\" decoding=\"async\" src=\"https://reps.hop.ie/img/mQhWZsSjw0-1179.png\" width=\"1179\" height=\"2556\"></picture>\n</div>\n<h3 id=\"recording-exercises\" tabindex=\"-1\">Recording exercises <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h3>\n<p>The content of this sheet makes use of a view I called <code>ProgressionViewer</code>. It allows for scrolling through a series of progressions, and performing actions on them.</p>\n<h3 id=\"progressionviewer\" tabindex=\"-1\">ProgressionViewer <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h3>\n<p>The main scrolling takes place in a <a href=\"https://developer.apple.com/documentation/swiftui/scrollview\">ScrollView</a> that I control using <a href=\"https://developer.apple.com/documentation/swiftui/scrollviewreader#\">ScrollViewReader</a>:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token class-name\">ScrollViewReader</span> <span class=\"token punctuation\">{</span> scrollViewValue <span class=\"token keyword\">in</span>\n    <span class=\"token class-name\">ScrollView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>horizontal<span class=\"token punctuation\">,</span> showsIndicators<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">HStack</span><span class=\"token punctuation\">(</span>spacing<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ForEach</span><span class=\"token punctuation\">(</span>progressions<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> displayProgression <span class=\"token keyword\">in</span>\n            <span class=\"token comment\">//... display the progression animation, title, etc</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span>displayProgression<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> geo<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">onPreferenceChange</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ViewOffsetKey</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Calculate the currently shown index</span>\n        <span class=\"token comment\">// and update the animation file name</span>\n        <span class=\"token comment\">// offsets, etc</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">scrollTargetLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>This makes use of <code>id</code> set to the given progression so that I can scroll to it when needed, using:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\">scrollViewValue<span class=\"token punctuation\">.</span><span class=\"token function\">scrollTo</span><span class=\"token punctuation\">(</span>progression<span class=\"token punctuation\">)</span></code></pre>\n<p>There's also a useful trick of making use of <a href=\"https://developer.apple.com/documentation/swiftui/view/onpreferencechange(_:perform:)\">onPreferenceChange</a> and a <code>ViewOffsetKey</code> change. This <a href=\"https://stackoverflow.com/a/62588295\">StackOverflow answer</a> gives more details.</p>\n<p>This allows me to do handy stuff like adjusting the offset of the animation when scrolling, or highlight the currently active step in the set of circles along the bottom of the screen.</p>\n<div class=\"video-wrapper\">\n    <video autoplay=\"\" muted=\"\" loop=\"\" playsinline=\"\" width=\"300\">\n    <source src=\"https://i.imgur.com/jeCpxED.mp4\" type=\"video/mp4\">\n    </video>\n\n<p>One detail to note: I'm not displaying an animation on each of the scrolling items. I found that was heavy to try to display up to 10 side by side, so instead I have one animation and I update the animation name based on scroll position when the animation is hidden with opacity.</p>\n<h3 id=\"saving-to-the-journal\" tabindex=\"-1\">Saving to the journal <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h3>\n<p>Using the stepper to select the number of reps updates the displayed number both in the text and the button. Pressing the button then calls a function that saves a journal entry. This is made up of date, exercise details and reps. For this I use <a href=\"https://developer.apple.com/documentation/swiftdata\">SwiftData</a>. This is a fairly painless way to save the values and persist larger data sets than would be possible with <code>UserDefaults</code>.</p>\n<h3 id=\"adding-exercises\" tabindex=\"-1\">Adding exercises <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h3>\n<div style=\"max-width: 294.5px; padding-top: 20px\">\n<picture><source type=\"image/avif\" srcset=\"https://reps.hop.ie/img/AxUJ_93ga4-1179.avif 1179w\"><source type=\"image/webp\" srcset=\"https://reps.hop.ie/img/AxUJ_93ga4-1179.webp 1179w\"><img alt=\"Adding exercise.\" loading=\"lazy\" decoding=\"async\" src=\"https://reps.hop.ie/img/AxUJ_93ga4-1179.png\" width=\"1179\" height=\"2556\"></picture>\n</div>\n<p>Selecting the <code>+</code> shows a <a href=\"https://developer.apple.com/documentation/swiftui/view/confirmationdialog(_:ispresented:titlevisibility:actions:)-46zbb\">confirmation dialog</a> containing exercise types that aren't currently in the day's routine. To keep the structure of the app simple, I chose to allow one of each type of exercise per day. Users can log more sets if they wish, or adjust the level if it's too easy or hard.</p>\n<h3 id=\"empty-state\" tabindex=\"-1\">Empty state <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h3>\n<div style=\"max-width: 294.5px; padding-top: 20px\">\n<picture><source type=\"image/avif\" srcset=\"https://reps.hop.ie/img/XuKE5Fu0aX-1179.avif 1179w\"><source type=\"image/webp\" srcset=\"https://reps.hop.ie/img/XuKE5Fu0aX-1179.webp 1179w\"><img alt=\"Empty home view.\" loading=\"lazy\" decoding=\"async\" src=\"https://reps.hop.ie/img/XuKE5Fu0aX-1179.png\" width=\"1179\" height=\"2556\"></picture>\n</div>\n<p>Empty states are an important part of any UI. I will need to add more to this screen but to make it nicer but it's good to have some kind of message to let the user know that the view isn't broken.</p>\n<h3 id=\"edit-mode\" tabindex=\"-1\">Edit mode <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h3>\n<div style=\"max-width: 294.5px; padding-top: 20px\">\n<picture><source type=\"image/avif\" srcset=\"https://reps.hop.ie/img/BJPF1LTeLz-1179.avif 1179w\"><source type=\"image/webp\" srcset=\"https://reps.hop.ie/img/BJPF1LTeLz-1179.webp 1179w\"><img alt=\"Home view in edit mode.\" loading=\"lazy\" decoding=\"async\" src=\"https://reps.hop.ie/img/BJPF1LTeLz-1179.png\" width=\"1179\" height=\"2556\"></picture>\n</div>\n<p>On the home view pressing <code>Edit</code> makes the list change to show delete and reordering UI. When in edit mode, I add in buttons to navigate between days. Selecting any of the exercises opens a <code>ProgressionViewer</code> view in a sheet but with the set of progressions being shown being the other stages of that exercise type.</p>\n<h3 id=\"changing-progressions\" tabindex=\"-1\">Changing progressions <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h3>\n<div style=\"max-width: 294.5px; padding-top: 20px\">\n<picture><source type=\"image/avif\" srcset=\"https://reps.hop.ie/img/XRGfzPJY-W-1179.avif 1179w\"><source type=\"image/webp\" srcset=\"https://reps.hop.ie/img/XRGfzPJY-W-1179.webp 1179w\"><img alt=\"Editing a progression.\" loading=\"lazy\" decoding=\"async\" src=\"https://reps.hop.ie/img/XRGfzPJY-W-1179.png\" width=\"1179\" height=\"2556\"></picture>\n</div>\n<p>The left and right arrows move between levels and stages, and the stages can be scrolled through also. Then the chosen level saved, which updates the <code>UserExerciseStages</code> stored data.</p>\n<p>This is then reflected across any instances of that exercise type through the rest of the week.</p>\n<h2 id=\"step-4-styling\" tabindex=\"-1\">Step 4: Styling <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h2>\n<p>This being my first app I'm working things out as I go in terms of how it looks. I'm aiming for it being simple, ideally a little fun, but bright and clear. This is something that will definitely evolve.</p>\n<p>When styling the list items, I found <a href=\"https://www.youtube.com/watch?v=tjR1hLg4-wc\">this Youtube video from Karin Prater</a> very helpful.</p>\n<h3 id=\"colors-settings\" tabindex=\"-1\">Colors settings <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h3>\n<p>Rather than specify a lot of colours everywhere, I set up a <code>Colors.swift</code> file where I can extend <code>Color</code>:</p>\n<pre class=\"language-swift\" tabindex=\"0\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token class-name\">Color</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> themeColor <span class=\"token operator\">=</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> lightBg <span class=\"token operator\">=</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>gradient\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> darkBg <span class=\"token operator\">=</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> <span class=\"token number\">0.05</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token number\">0.15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>gradient\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> lightAnimationBg <span class=\"token operator\">=</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>white\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> darkAnimationBg <span class=\"token operator\">=</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">.</span><span class=\"token function\">opacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.05</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> secondaryButtonBg <span class=\"token operator\">=</span> themeColor<span class=\"token punctuation\">.</span>gradient\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This will act as a central place for storing the theme. For version <code>0.1</code> I am ok with it but it definitely needs more polish.</p>\n<h3 id=\"light-and-dark-mode\" tabindex=\"-1\">Light and dark mode <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h3>\n<div style=\"max-width: 600px; padding-top: 20px; display: flex; gap: 10px;\">\n<picture><source type=\"image/avif\" srcset=\"https://reps.hop.ie/img/vfoy9oM4oo-1179.avif 1179w\"><source type=\"image/webp\" srcset=\"https://reps.hop.ie/img/vfoy9oM4oo-1179.webp 1179w\"><img alt=\"Home view in dark mode.\" loading=\"lazy\" decoding=\"async\" src=\"https://reps.hop.ie/img/vfoy9oM4oo-1179.png\" width=\"1179\" height=\"2556\"></picture>\n<picture><source type=\"image/avif\" srcset=\"https://reps.hop.ie/img/jZxis_J2Sh-1179.avif 1179w\"><source type=\"image/webp\" srcset=\"https://reps.hop.ie/img/jZxis_J2Sh-1179.webp 1179w\"><img alt=\"Recording exercise view in dark mode.\" loading=\"lazy\" decoding=\"async\" src=\"https://reps.hop.ie/img/jZxis_J2Sh-1179.png\" width=\"1179\" height=\"2556\"></picture>\n</div>\n<p>The <code>Color</code> values include light and dark. I'm not sure yet how well this will work but I'm swapping out these in the various backgrounds and foregroundStyles using <a href=\"https://developer.apple.com/documentation/swiftui/environmentvalues/colorscheme\">@Environment(.colorScheme)</a>.</p>\n<h2 id=\"next-steps\" tabindex=\"-1\">Next steps <a class=\"header-anchor\" href=\"https://reps.hop.ie/dev-diary-01/\">#</a></h2>\n<p>This post reflects a lot of work over 6 months. There's lots more to do before I'll be able to set up a Testflight and start getting some user testing. Some things I'd like to have before then:</p>\n<ul>\n<li>Onboarding screen for helping build a starting routine</li>\n<li>Icons, so many icons (one for each progression)</li>\n<li>Set up primary and secondary button styles to tidy the code a bit</li>\n<li>Add in an (initially empty) journal view to surface some useful stats or graphs</li>\n<li>App icon, other small details</li>\n</ul>\n<p>I'll try to do a regular update here. By reading this you're providing me with much-needed accountability!</p>\n</div></div></div>",
			"date_published": "2024-02-09T00:00:00Z"
		}
		
	]
}
